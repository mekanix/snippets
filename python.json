{
  "api": {
    "prefix": "freenitapi",
    "body": [
      "from typing import List",
      "",
      "import ormar",
      "from fastapi import HTTPException",
      "",
      "from freenit.api.router import route",
      "",
      "from ..models.${1} import ${1:/capitalize}, ${1:/capitalize}Optional",
      "",
      "",
      "@route('/${1}s', tags=['${1}'], many=True)",
      "class ${1:/capitalize}ListAPI():",
      "    @staticmethod",
      "    async def get() -> List[${1:/capitalize}]:",
      "        return await ${1:/capitalize}.objects.all()",
      "",
      "    @staticmethod",
      "    async def post(${1}: ${1:/capitalize}) -> ${1:/capitalize}:",
      "        await ${1}.save()",
      "        return ${1}",
      "",
      "",
      "@route('/${1}s/{id}', tags=['${1}'], many=True)",
      "class ${1:/capitalize}DetailAPI():",
      "    @staticmethod",
      "    async def get(id: int) -> ${1:/capitalize}:",
      "        try:",
      "            ${1} = await ${1:/capitalize}.objects.get(pk=id)",
      "        except ormar.exceptions.NoMatch:",
      "            raise HTTPException(status_code=404, detail=\"No such ${1}\")",
      "        return ${1}",
      "",
      "    @staticmethod",
      "    async def patch(id: int, ${1}_data: ${1:/capitalize}Optional) -> ${1:/capitalize}:",
      "        try:",
      "            ${1} = await ${1:/capitalize}.objects.get(pk=id)",
      "            await ${1}.patch(${1}_data)",
      "        except ormar.exceptions.NoMatch:",
      "            raise HTTPException(status_code=404, detail=\"No such ${1}\")",
      "        return ${1}",
      "",
      "    @staticmethod",
      "    async def delete(id: str) -> ${1:/capitalize}:",
      "        try:",
      "            ${1} = await ${1:/capitalize}.objects.get(pk=id)",
      "        except ormar.exceptions.NoMatch:",
      "            raise HTTPException(status_code=404, detail=\"No such ${1}\")",
      "        await ${1}.delete()",
      "        return ${1}"
    ],
    "description": "Freenit API"
  },

  "ormar": {
    "prefix": "freenitormar",
    "body": [
      "import ormar",
      "",
      "from freenit.config import getConfig",
      "",
      "from freenit.models.metaclass import AllOptional",
      "from freenit.models.ormar.base import OrmarBaseModel",
      "",
      "config = getConfig()",
      "",
      "",
      "class ${1}(OrmarBaseModel):",
      "    class Meta(config.meta):",
      "        pass",
      "",
      "    id: int = ormar.Integer(primary_key=True)",
      "    ${0}",
      "",
      "",
      "class ${1}Optional(${1}, metaclass=AllOptional):",
      "    pass"
    ],
    "description": "Freenit model using Ormar"
  }
}
