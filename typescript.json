{
  "store": {
    "prefix": "freenitstoresvelte",
    "body": [
      "import { writable } from 'svelte/store'",
      "",
      "class ${1:/capitalize}ListStore {",
      "  constructor() {",
      "    const { set, update } = writable([])",
      "    this.set = set",
      "    this.update = update",
      "  }",
      "",
      "  async get() {",
      "    try {",
      "      const response = await fetch('/api/v1/${1}s')",
      "      const data = await.response.json()",
      "      this.set(data)",
      "      return {",
      "        ...data,",
      "        ok: true,",
      "      }",
      "    } catch(error) {",
      "      return {",
      "        ...error,",
      "        ok: false",
      "      }",
      "    }",
      "  }",
      "",
      "  async create(${1}Data) {",
      "    try {",
      "      const response = await fetch(",
      "        '/api/v1/${1}s', ",
      "        {method: 'POST', body: ${1}Data},",
      "      )",
      "      const data = await.response.json()",
      "      this.update((store) => [...store, data])",
      "      return {",
      "        ...data,",
      "        ok: true,",
      "      }",
      "    } catch(error) {",
      "      return {",
      "        ...error,",
      "        ok: false",
      "      }",
      "    }",
      "  }",
      "}",
      "",
      "class ${1:/capitalize}DetailStore {",
      "  constructor() {",
      "    const { set, update } = writable({})",
      "    this.set = set",
      "    this.update = update",
      "  }",
      "",
      "  async get(id: Number) {",
      "    try {",
      "      const response = await fetch(`/api/v1/${1}s/\\${id}`)",
      "      const data = await.response.json()",
      "      this.set(data)",
      "      return {",
      "        ...data,",
      "        ok: true,",
      "      }",
      "    } catch(error) {",
      "      return {",
      "        ...error,",
      "        ok: false",
      "      }",
      "    }",
      "  }",
      "",
      "  async edit(id: Number, ${1}Data: Record<string, any>) {",
      "    try {",
      "      const response = await fetch(",
      "        `/api/v1/${1}s/\\${id}`,",
      "        {method: 'PATCH', body: ${1}Data},",
      "      )",
      "      const data = await.response.json()",
      "      this.set(data)",
      "      return {",
      "        ...data,",
      "        ok: true,",
      "      }",
      "    } catch(error) {",
      "      return {",
      "        ...error,",
      "        ok: false",
      "      }",
      "    }",
      "  }",
      "",
      "  async delete(id: Number) {",
      "    try {",
      "      const response = await fetch(",
      "        `/api/v1/${1}s/\\${id}`,",
      "        {method: 'DELETE'},",
      "      )",
      "      const data = await.response.json()",
      "      return {",
      "        ...data,",
      "        ok: true,",
      "      }",
      "    } catch(error) {",
      "      return {",
      "        ...error,",
      "        ok: false",
      "      }",
      "    }",
      "  }",
      "}",
      "",
      "const ${1} = {",
      "  detail: new ${1:/capitalize}DetailStore(),",
      "  list: new ${1:/capitalize}ListStore(),",
      "}",
      "",
      "export default ${1}"
    ],
    "description": "Freenit Svelte store"
  }
}
